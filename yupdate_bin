#!/bin/bash
# vim:set ts=2 sw=2:
# Base template2.src version 1.0 last modified 2018.01.11 by y

y_start(){ :; }
y_exit(){ :; }
y_help(){ :; }

trap y_exit TERM HUP INT

# Source the function library
ylib () {
  FSH="y_bash_lib"
  LIB=`which $FSH`
  test $? != '0' && { echo Fatal Error!; exit 1; }
  test -r ${LIB} && source ${LIB}
}
ylib

# Uncomment this to allow colors on the console
#USE_COLOR=$YES

# This will enable positioning of a text to the end (-8 char) 
# of a line independent of window size
#USE_POS=$YES

# Enable bell for warnings and errors
#USE_BELL=$YES

# define the following to match the program current state
PROGRAM_NAME="Update bin"
VERSION="0.5"
LAST_MOD="2021.02.05"

# Define log file here
LOG="/tmp/${0##*/}.log"

# Uncomment this if you need debug enabled
#Y_DEBUG=$TRUE

# use these to set cleanup on exit
#MOUNTED=""             # y_exit will unmount them
#DELETE_ON_EXIT=""      # y_exit will delete them
#LAST_CMD=""            # y_exit will run it just before exit

# Uncomment to make script quiet
#Y_QUIET=$FALSE

# Uncomment to ask for confirmation 
#Y_CONFIRM=$TRUE

# destination options: LOG,STDOUT,STDERR
Y_MSG_DEST="STDOUT,STDERR,LOG"

ylib

Y_TDIR="/usr/local/bin"
Y_SDIR="/xdir/proj/jenov/scripts"
Y_CMD="cp"

#y_init_screen
y_start
# ===================================================================================
HELP="Defaults"
# read command line parameters
while [ -n "$1" ] ; do
  case $1 in
    --help|-h)	y_help "[Options]"; y_exit;;    #; Help [HELP]
    --log|-L)   export LOG="$2"; shift;;        #; Set LOG [LOG]
    --quiet|-Q) Y_QUIET="true";;                #; Enable quiet mode [Y_QUIET]
    --debug|-D) Y_DEBUG="true";;                #; Enable debug mode [Y_DEBUG]
    --dry|-N)   Y_DRY_RUN="true";;              #; Execute dry run mode [Y_DRY_RUN]
    --exit)     Y_EXIT_ON_ERROR=$TRUE;;         #; Exit on error [Y_EXIT_ON_ERROR]
    --edebug)   Y_DEBUG_ON_ERROR=$TRUE;;        #; Debug on error [Y_DEBUG_ON_ERROR]
    --nocolor)  USE_COLOR="";;                  #; Enable color output [USE_COLOR]
    --version|-V) y_version; y_exit;;           #; Display version and exit
    --tdir|-t)  Y_TDIR="$2"; shift;;            #; Target dir [Y_TDIR]
    --sdir|-s)  Y_SDIR="$2"; shift;;            #; Source dir [Y_SDIR]
    --cmd|-c)   Y_CMD="$2"; shift;;             #; Command to use [Y_CMD]
    *)          y_fatal_error "Unknown option [$1]";;
  esac
  shift
done

ylib

if [[ "Y_QUIET" == "$TRUE" ]] ; then
  y_set_default Y_MSG_DEST "STDERR,LOG"
else
  y_set_default Y_MSG_DEST "STDOUT,STDERR,LOG"
fi
y_set_default USE_COLOR $TRUE
y_set_default Y_DEBUG_ON_ERROR $FALSE
y_set_default Y_EXIT_ON_ERROR $FALSE

test -w $Y_TDIR || y_fatal_error "Can not write to [$Y_TDIR]"
FLIST=`ls $Y_TDIR`
for i in $FLIST ; do
  if [[ -f "$Y_SDIR/$i" ]] ; then
    y_run $Y_CMD $Y_SDIR/$i $Y_TDIR
  else
    y_error "cannot find [$i]"
    ERROR=$TRUE
  fi
done

test -z "$ERROR" && y_info "updated [$Y_TDIR] successfully"
# ===================================================================================
# Leave this as the last line
y_exit
