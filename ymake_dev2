#!/bin/bash
# vim:set ts=2 sw=2:
# Base template2.src version 1.0 last modified 2018.01.11 by y

y_start(){ :; }
y_exit(){ :; }
y_help(){ :; }

trap y_exit TERM HUP INT

# Source the function library
ylib () {
  FSH="y_bash_lib"
  LIB=`which $FSH`
  test $? != '0' && { echo Fatal Error!; exit 1; }
  test -r ${LIB} && source ${LIB}
}
ylib

# Uncomment this to allow colors on the console
USE_COLOR=$YES

# This will enable positioning of a text to the end (-8 char) 
# of a line independent of window size
USE_POS=$YES

# Enable bell for warnings and errors
#USE_BELL=$YES

# define the following to match the program current state
PROGRAM_NAME="ynew_dev2"
VERSION="0.1"
LAST_MOD="2018.02.08"

# Define log file here
LOG="/tmp/${0##*/}.log"

# Uncomment this if you need debug enabled
#Y_DEBUG=$TRUE

# use these to set cleanup on exit
#MOUNTED=""             # y_exit will unmount them
#DELETE_ON_EXIT=""      # y_exit will delete them
#LAST_CMD=""            # y_exit will run it just before exit

# Uncomment to make script quiet
#Y_QUIET=$FALSE

# Uncomment to ask for confirmation 
#Y_CONFIRM=$TRUE

# destination options: LOG,STDOUT,STDERR
#Y_MSG_DEST="LOG"
Y_RUN_RET_SUM=0
ylib

# -------------- configuration defaults -----------------------
Y_MOUNT_DEV="$FALSE"
Y_DEV_DEV="/dev/sdb3"
Y_DEV_MNT="/xy"
Y_SRC_DIRS="/usr /var /opt /boot"
Y_SRC_FSTAB="/etc/fstab.dev"
Y_PART_GENTOO="/dev/sdb2"

#y_init_screen
y_start
# ===================================================================================
HELP="Defaults"
# read command line parameters
while [ -n "$1" ] ; do
  case $1 in
    --help|-h)	y_help "[Options]"; y_exit;;    #; Help [HELP]
    --quiet|-Q) Y_QUIET=$TRUE;;                 #; Enable quiet mode [Y_QUIET]
    --debug|-D) Y_DEBUG=$TRUE;;                 #; Enable debug mode [Y_DEBUG]
    --dry|-N)   Y_DRY_RUN=$TRUE;;               #; Execute dry run mode [Y_DRY_RUN]
    --nocolor)  USE_COLOR="";;                  #; Enable color output [USE_COLOR]
    --log|-L)   LOG="$2"; shift;;               #; Set log destination [LOG]
    --version|-V) y_version; y_exit;;           #; Display version and exit
    --dev|-d)   Y_DEV_DEV="$2"; shift;;         #; Set device [Y_DEV_DEV]
    --mnt|-M)   Y_DEV_MNT="$2"; shift;;         #; Set DEV root [Y_DEV_MNT]
    --mountdev) Y_MOUNT_DEV="$2"; shift;;       #; Mount DEV FS [Y_MOUNT_DEV]
    --src_dirs) Y_SRC_DIRS="$2"; shift;;        #; Source dirs [Y_SRC_DIRS]
    --src_fstab) Y_SRC_FSTAB="$2";shift;;       #; fstab to as source [Y_SRC_FSTAB]
    --gentoo)   Y_GENTOO_DIR="$2";shift;;       #; Gentoo dir location [Y_GENTOO_DIR]
    --noclean)  Y_NOCLEAN=$TRUE;;               #; Do not clean-up on exit [Y_NOCLEAN]
    --sync)     Y_SYNC=$TRUE;;                  #; Sync gentoo files [Y_SYNC]
    --update)   Y_UPDATE=$TRUE;;                #; Update Gentoo [Y_UPDATE]
    --check)    Y_CHECK=$TRUE;;                 #; Pre-check build [Y_CHECK]
    --build)    Y_BUILD=$TRUE;;                 #; Build/update DEV system [Y_BUILD]
    --ckernel)  Y_CONFIG_KERNEL=$TRUE;;         #; Config kernel [Y_CONFIG_KERNEL]
    --bkernel)  Y_BUILD_KERNEL=$TRUE;;          #; Build kernel [Y_BUILD_KERNEL]
    --lilo)     Y_LILO=$TRUE;;                  #; Update bootloader [Y_LILO]
    --grub_inst) Y_GRUB_INSTALL=$TRUE;;         #; Install grub [Y_GRUB_INSTALL]
    --grub)     Y_GRUB=$TRUE;;                  #; Update grub [Y_GRUB]
    --rebuild)  Y_REBUILD=$TRUE;;               #; Rebuild system after new kernel
    --clgentoo) Y_CGENTOO=$TRUE;;               #; Clean Gentoo [Y_CGENTOO]
    --qtest)    Y_QUICKTEST=$TRUE;;             #; Test new sys by chroot [Y_QUICKTEST]
    --systest)  Y_SYSTEST=$TRUE;;               #; Test by reboot into DEV [Y_SYSTEST]
  esac
  shift
done

y_set_default Y_MSG_DEST "LOG,STDOUT,STDERR"
y_set_default Y_DEBUG_ON_ERROR $TRUE
y_set_default Y_EXIT_ON_ERROR $FALSE
ylib

y_check_cmds "lsblk chroot grep emerge"

y_check_dryrun_not && test $(id -u) -ne 0 && 
  y_fatal_error "Script should run as root!"

# mount DEV ROOT_FS if it is not mounted yet
! y_check_mount "$Y_DEV_DEV" "$Y_DEV_MNT" && {
    y_progress_nl "Mount DEV root on $Y_DEV_MNT..."
    y_run "fsck -p $Y_DEV_DEV 2>&1 >> $LOG"
    y_run mkdir -p $Y_DEV_MNT
    y_mount $Y_DEV_DEV $Y_DEV_MNT
    y_progress_end
}

test "$Y_MOUNT_DEV" != $FALSE && {
  y_progress_nl "Mount extra devices..."
  OLDIFS=$IFS
  IFS=","
  Y_MOUNT_LIST=`echo $Y_MOUNT_DEV`
  IFS=$OLDIFS
  for i in $Y_MOUNT_LIST ; do
    y_run mkdir -p ${Y_DEV_MNT}${i#*=}
    y_mount ${i%=*} ${Y_DEV_MNT}${i#*=}
  done
  y_progress_end
}

# sync dev to current
test -n "$Y_SYNC" && {
    y_progress_nl "Sync DEV system with current install..."
    y_run yrsync_xos -x "$Y_DEV_MNT" -f /etc/fstab.dev -d \"$Y_SRC_DIRS\" -m
    test -h $Y_DEV_MNT/gentoo && y_run rm $Y_DEV_MNT/gentoo
    y_progress_end
}  

# mount system on DEV
test "$Y_MOUNT_DEV" != $FALSE && {
  y_progress_nl "Mount DEV system devices..."
  y_run mkdir -p $Y_DEV_MNT/dev
  y_mount --bind /dev $Y_DEV_MNT/dev
  y_run mkdir -p $Y_DEV_MNT/dev/pts
  y_mount --bind /dev/pts $Y_DEV_MNT/dev/pts
  y_run mkdir -p $Y_DEV_MNT/proc
  y_mount -t proc proc $Y_DEV_MNT/proc
  y_run mkdir -p $Y_DEV_MNT/gentoo
  test ! -d $Y_DEV_MNT/gentoo/portage &&
    y_mount --bind $Y_GENTOO_DIR ${Y_DEV_MNT}/gentoo
  y_check_dryrun_not && { 
    X="$Y_MSG_DEST"
    Y_MSG_DEST="LOG,STDOUT"
    PORTAGE_TMPDIR=`y_run chroot $Y_DEV_MNT /bin/bash -c \
      '"emerge --info 2>/dev/null | grep PORTAGE_TMPDIR"'`
    Y_MSG_DEST=$X
    P_TMP=${PORTAGE_TMPDIR##*PORTAGE_TMPDIR=\"}
    P_TMP=${P_TMP%*\"}
    test "PORTAGE_TMPDIR=\"$P_TMP\"" != "$PORTAGE_TMPDIR" && 
      y_fatal_error Portage TMP dir [$P_TMP] not what expected!
  }
  y_run mkdir -p ${Y_DEV_MNT}${P_TMP}
  y_mount --bind /tmp $Y_DEV_MNT$P_TMP
  y_run chmod 1777 $Y_DEV_MNT$P_TMP
  y_progress_end
}

# clean up gentoo files: packages and distfiles
test -n "$Y_CGENTOO" && {
    y_progress_nl "Clear Gentoo build files...."
    y_run eclean-pkg
    y_progress_end
}

# update build system on DEV: emerge --sync
test -n "$Y_UPDATE" && {
   y_progress_nl "Gentoo sync and portage update..."
    #y_run chroot $Y_DEV_MNT emerge --sync
    y_run chroot $Y_DEV_MNT emaint -a sync
    y_run chroot $Y_DEV_MNT emerge -1q portage
    y_progress_end
}

# check if it would build: emerge -pvuDN world
test -n "$Y_CHECK" && {
    y_progress_nl "Pre-Check build..."
    y_run chroot $Y_DEV_MNT emerge -pvuDN --verbose-conflicts world
    y_progress_end
}

# build system on DEV: emerge -qubDN world
test -n "$Y_BUILD" && {
    y_progress_nl "Build/update DEV system..."
    y_run chroot $Y_DEV_MNT emerge -quDN world
    X="$Y_MSG_DEST"
    Y_MSG_DEST="STDOUT,LOG"
    y_run chroot $Y_DEV_MNT etc-update
    Y_MSG_DEST=$X
    y_progress_end
}

# configure kernel
test -n "$Y_CONFIG_KERNEL" && {
  y_dryrun "Change the kernel configuration"
  y_check_dryrun_not && {
    cd $Y_DEV_MNT/usr/src/linux
    bash --rcfile $Y_CONSOLE -i
  }
}

# build new kernel
test -n "$Y_BUILD_KERNEL" && {
    y_progress_nl "Build kernel..."
    Y_MSG_DEST="STDERR,LOG"
    y_run chroot $Y_DEV_MNT /bin/bash -c \
      '"cd /usr/src/linux; make bzImage modules modules_install"'
    #y_run mount -o remount,rw /boot
    #y_run cp /boot/vmlinuz.dev /boot/vmlinuz.dev_old
    #y_run cp $Y_DEV_MNT/usr/src/linux/arch/x86/boot/bzImage /boot/vmlinuz.dev
    #y_run mount -o remount,ro /boot
    y_progress_end
}

# update lilo bootloader
test -n "$Y_LILO" && {
    y_progress_nl "Update bootloader..."
    y_run mount -o remount,rw /boot
    y_run lilo
    y_run mount -o remount,ro /boot
    y_progress_end
}    

# grub install
test -n "$Y_GRUB_INSTALL" && {
  y_progress_nl "Grub install..."
  DEV=`lsblk -no pkname $Y_DEV_DEV`
  test -b /dev/$DEV || y_fatal_error "Invalid block device [$DEV]"
  X="$Y_MSG_DEST"
  Y_MSG_DEST="LOG"
  y_run mount -o remount,rw /sys/firmware/efi/efivars
  y_run grub-install --root-directory=$Y_DEV_MNT --removable \
    --target=x86_64-efi --efi-directory=$Y_DEV_MNT/boot/efi /dev/$DEV
  y_run mount -o remount,ro /sys/firmware/efi/efivars
  Y_MSG_DEST=$X
  y_progress_end
}

# update grub bootloader
test -n "$Y_GRUB" && {
  y_progress_nl "Update grub bootloader..."

  y_progress_end
}

# rebuild/clean-up system after new kernel
test -n "$Y_REBUILD" && {
    y_progress_nl "Check and clean-up system..."
    y_progress_nl "  Chech build integrity..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -quDN world"'
    y_progress_nl "  Remove unused packages '--depclean'..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge --depclean -q"'
    y_progress_nl "  Chech build after depclean..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -quDN world"'
    y_progress_nl "  Rebuild preserved packages..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @preserved-rebuild -q"'
    y_progress_nl "  Rebuild X11 modules..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @x11-module-rebuild -q"'
    y_progress_nl "  Rebuild other modules..."
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @module-rebuild -q"'
    y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -q1 udev"'
    #y_progress_nl "Check, clean-up system"
    y_progress_end
}

# quick test new install by chroot and command line
test -n "$Y_QUICKTEST" && {
    y_progress_nl "Quick test new system..."
    y_run cp /x_proj/jenov/scripts/yrsync_dev $Y_DEV_MNT/usr/local/bin
    y_run chroot $Y_DEV_MNT bash --rcfile $Y_CONSOLE -i
    y_progress_end
}

test -f "$Y_TODO" && y_run_ cp "$Y_TODO" "$Y_DEV_MNT"/__TODO__

# Test new install by hibernating current version and boot into DEV
test -n "$Y_SYSTEST" -o -n "$Y_SYSMERGE" && {
    y_progress_nl "System test/merge..."
    y_progress_nl "  Hibernate current host and boot into DEV..."
    y_run cp /proj/jenov/scripts/yrsync_dev $Y_DEV_MNT/usr/local/bin
    y_run y_umount
    y_run mount -o remount,rw /boot
    y_run lilo -R DEV noresume
    y_run mount -o remount,ro /boot
    y_run y_hibernate reboot
    y_run pm-hibernate
    y_run mount -o remount,rw /boot
    y_run lilo -R
    y_run mount -o remount,ro /boot
    y_run y_hibernate shutdown
    y_progress "All done"
    y_progress_end
}

#y_debug_console

# ===================================================================================
# Leave this as the last line
y_exit
