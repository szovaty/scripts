# vim:set ts=4:
#/bin/bash
# script has two modes
#       new sys mode: creates an encrypted installation of install media 
#       migrate mode: backups up current system, repartition disk and reinstalls
#  Limitations: 
#       user needs to set partitions mounting points and fs type
#       user needs to select usual items for the install (like language,...)

Y_VER="1.0-rc1"
MODE_NEWSYS="new_sys"
MODE_MIG="migrate"
#Y_DEBUG="true"

# configuration
Y_MODE=$MODE_NEWSYS
Y_DEV="/dev/sda"

Y_BOOT_SIZE="400"
Y_SWAP_SIZE="8200"

Y_ROOT_NAME="root"
Y_ROOT_PASSWD="csolnok"

Y_ORIG_ROOT="/dev/sda1"
Y_ORIG_MOUNT=""
Y_ORIG_MNT="/mnt"
Y_NEW_ROOT="/dev/mapper/$Y_ROOT_NAME"
Y_BKP_SRV="bp-nas"
Y_BKP_USER="jenov"
Y_BKP_PATH="/volume1/backup/tmp"
Y_FILENAME="test.tar"

Y_FS_ROOT="ext4"
Y_FS_BOOT="ext2"
Y_ERROR_CONSOLE="true"
Y_EPS1="\[\033[01;31m\]FIXME#\[\033[00m\] " 
Y_LOG="${0}.log"

# ============================================================================

# self documenting program options from the source
# return opts as a string with commants for source
y_help_opt () {
    local HELPMSG MSG DEF i j k x
    IFS=$'\n'
    for i in `cat $0 | grep -e '#;'` ; do
        t=`echo $i | tr -d [:space:]`
        test ${t:0:1} != '-' && continue
        HELPMSG="${i##*'#;'}"
        i=${i%)*} ; 
        if [ "${i##*'#;'}" = "${HELPMSG}" ] ; then printf "%25s %s\n" ' ' $HELPMSG ; continue ; fi
        IFS=$'|'
        for j in $i ; do
            if [ "${j%\$*}" = "$j" ] ; then k=$i ; break ; fi
            eval x='$'${j#*\$}
            if [ -z "$k" ] ; then k=$x ; else k="$k|$x" ; fi
        done
        k="${k}:"
        IFS=$' \t\n' ; MSG="" ; DEF=""
        for j in $HELPMSG ; do
            if [ "${j#*[}" != "$j" ] ; then j=${j%*]}; eval j='$'${j#*[} ; DEF="[${j}]"; continue ; fi
            MSG="$MSG $j"
        done
        IFS=$'\n'
        k=`echo $k | awk ' { print $1 }'`
        printf "%20s %-40s %s\n" "$k" "$MSG" "$DEF" 
        k=""
    done
    IFS=$' \t\n'
}
        
# command line inputs
while [ -n "$1" ]; do
    case $1 in
        --help|-h)      echo ${0##*/} usage help screen ;y_help_opt;exit 0;; #; Display help (this screen)
        --migrate|-m)   Y_MODE="$MODE_MIG";;                    #; Set migration mode [Y_MODE]
        --dev|-d)       test -n "$2" && Y_DEV="$2"; shift;;     #; Block device to use [Y_DEV]
        --o_root|-o)    test -n "$2" && Y_ORIG_ROOT="$2"; shift;; #; Set source root [Y_ORIG_ROOT]
        --o_mount|-M)   test -n "$2" && Y_ORIG_MOUNT="$2"; shift;; #; Set what to mount for backup [Y_ORIG_MOUNT]
        --n_root|-r)    test -n "$2" && Y_NEW_ROOT="$2"; shift;; #; Set where to mount new root FS [Y_NEW_ROOT]
        --b_user|-u)    test -n "$2" && Y_BKP_USER="$2"; shift;; #; Set user name for backup and restore [Y_BKP_USER]
        --filename|-f)  test -n "$2" && Y_FILENAME="$2"; shift;; #; Set backup file name [Y_FILENAME]
        --debug|-D)     Y_DEBUG="true";;                        #; Enable debug mode [Y_DEBUG]
        --dry|-N)       Y_DRY_RUN="true";;                      #; Enable dry run mode [Y_DRY_RUN]
        --log|-l)       test -n "$2" && Y_LOG="$2"; shift;;     #; Set log file [Y_LOG]
    esac
    shift
done

# echo some parameters for the record
echo VER=$Y_VER, DEBUG=$Y_DEBUG, \
MODE=$Y_MODE, LOG=$Y_LOG, DRY_RUN=$Y_DRY_RUN | tee -a $Y_LOG

# run function that checks sucessful command exit status and breaks if not
yrun () {
    if [ "$Y_DEBUG" = "true" ] ; then {
        echo DEBUG: "$*" | tee -a $Y_LOG
        OUT=${Y_LOG}
    }
    else
        OUT="/dev/null"
    fi
    test -z "$Y_DRY_RUN" && {
        if [ -n "$FOUT" ]; then
            $* >>$FOUT 2>>$Y_LOG
        else
            $* >>$OUT 2>>$Y_LOG
        fi
        test "$?" = "0" || { 
            echo "FATAL ERROR" | tee -a $Y_LOG
            if [ "$Y_ERROR_CONSOLE" = "true" ] ; then
                bash --rcfile <(echo "PS1='$Y_EPS1'") -i
                test "$?" = "0" || exit 1
            else
                exit 1
            fi
        }
    }
    return 0
}

# ----------------------------------------------------------------------------
# internal variables
TMP="/tmp/ytmp"
Y_BOOT="1"
Y_SWAP="2"
Y_ROOT="3"
Y_LABEL="msdos"

# backup system before migration
test "$Y_MODE" = "$MODE_MIG" && {
    yrun sudo mount $Y_ORIG_ROOT $Y_ORIG_MNT
    yrun sudo mount --bind /dev $Y_ORIG_MNT/dev
    UMOUNT="$Y_ORIG_MNT"
    for i in $Y_ORIG_MOUNT; do
        yrun sudo chroot $Y_ORIG_MNT mount $i
        UMOUNT="$UMOUNT$i $UMOUNT"
    done

    yrun sudo umount $Y_ORIG_MNT/dev

    # FIXME: 
    #   dry run can not work in this complex command 
    #   so I added this workaround

    test "$Y_DEBUG" = "true" &&
        echo "DEBUG: sudo tar -c $Y_ORIG_MNT | \
        ssh $Y_BKP_USER@$Y_BKP_SRV FILE=$Y_FILENAME VAR=$Y_BKP_PATH \
        'X=\$VAR; Y=\$FILE; cat > \${X}/\${Y}'" | tee -a $Y_LOG
    echo "Backup system"
    test -z "$Y_DRY_RUN" &&
        sudo tar -c $Y_ORIG_MNT 2>>$Y_LOG | \
        ssh $Y_BKP_USER@$Y_BKP_SRV FILE=$Y_FILENAME VAR=$Y_BKP_PATH \
        'X=$VAR; Y=$FILE; cat > ${X}/${Y}'
    echo "Computing checksum and store"
    test -z "$Y_DRY_RUN" &&
        ssh $Y_BKP_USER@$Y_BKP_SRV FILE=$Y_FILENAME VAR=$Y_BKP_PATH \
        'X=$VAR; Y=$FILE; md5sum ${X}/${Y} > ${X}/${Y}.md5sum'
    
    yrun sudo umount $UMOUNT
}

# -----------------------------------------------------------------------------
# setup new partitions on system disk

grep $Y_ORIG_MNT /etc/mtab 1>/dev/null
test "$?" = "0" && yrun sudo umount -l -A $Y_ORIG_MNT

# only works with single swap partition on target device
X=`sudo swapon -s | grep $Y_DEV`
X=${X%%' '*}
test -n "$X" && yrun sudo swapoff $X

yrun sudo parted --script $Y_DEV mklabel $Y_LABEL

# Make sure Y_START>0 to leave space for the boot code
Y_START=1; Y_END=$Y_BOOT_SIZE
yrun sudo parted --script $Y_DEV mkpart primary ext2 $Y_START $Y_END

Y_START=$Y_END; Y_END=$(($Y_START+$Y_SWAP_SIZE))
yrun sudo parted --script $Y_DEV mkpart primary linux-swap $Y_START $Y_END

Y_START=$Y_END; Y_END="100%"
yrun sudo parted --script $Y_DEV mkpart primary ext2  $Y_START $Y_END

yrun sudo parted --script $Y_DEV set $Y_BOOT "boot" on 

# setup new filesystems
yrun sudo mkfs.${Y_FS_BOOT} -F ${Y_DEV}$Y_BOOT
yrun sudo mkswap -f ${Y_DEV}$Y_SWAP
echo $Y_ROOT_PASSWD | yrun sudo cryptsetup --cipher=aes-xts-plain --key-size=256 luksFormat ${Y_DEV}$Y_ROOT
echo $Y_ROOT_PASSWD | yrun sudo cryptsetup luksOpen ${Y_DEV}$Y_ROOT $Y_ROOT_NAME
yrun sudo cryptsetup -v status $Y_ROOT_NAME
yrun sudo mkfs.${Y_FS_ROOT} -F /dev/mapper/$Y_ROOT_NAME

# run GUI based installation for new system setup
test "$Y_MODE" = "$MODE_NEWSYS" && {
    echo "NOTE: Select 'Continue Testing' after installation finished!"
    yrun ubiquity -d
}

# restore or fix up installed image
yrun sudo mount /dev/mapper/$Y_ROOT_NAME $Y_ORIG_MNT
yrun cd $Y_ORIG_MNT
yrun sudo mkdir -p boot
yrun sudo mount ${Y_DEV}$Y_BOOT boot

test "$Y_MODE" = "$MODE_MIG" && {
    # restore system from backup
    # FIXME: 
    #   dry run can not work in this complex command 
    #   so I added this workaround
    test "$Y_DEBUG" = "true" &&
        echo "DEBUG: 
        ssh $Y_BKP_USER@$Y_BKP_SRV FILE=$Y_FILENAME VAR=$Y_BKP_PATH \
        'X=\$VAR; Y=\$FILE; cat \${X}/\${Y}' | \
        sudo tar -x -C /" | tee -a $Y_LOG

    echo "Restore system from archive"
    test -z "$Y_DRY_RUN" &&
        ssh $Y_BKP_USER@$Y_BKP_SRV FILE=$Y_FILENAME VAR=$Y_BKP_PATH \
        'X=$VAR; Y=$FILE; cat ${X}/${Y}' | sudo tar -x -C / 
}

yrun sudo mount --bind /dev dev
yrun sudo mount --bind /sys sys
yrun sudo mount -t proc proc proc

FOUT=$TMP
    yrun sudo blkid -o export ${Y_DEV}$Y_ROOT
    yrun source $TMP
    test -z "$Y_DRY_RUN" -a -z "$UUID" && { 
        echo "FATAL ERROR: UUID is empty" | tee -a $Y_LOG
        cat $TMP | tee -a $Y_LOG
        exit 1
    }
    yrun rm -f $TMP
    yrun echo root UUID=${UUID} none luks
FOUT=""

yrun cat $TMP
yrun sudo cp $TMP $Y_ORIG_MNT/etc/crypttab

# make sure we have all essentials
yrun sudo cp /etc/resolv.conf $Y_ORIG_MNT/etc
yrun sudo chroot $Y_ORIG_MNT apt-get install --yes cryptsetup

# update system
yrun rm -f $TMP

FOUT="$TMP"
    yrun echo $Y_NEW_ROOT  /     $Y_FS_ROOT errors=remount-ro 0 1
    yrun echo $Y_DEV$Y_BOOT /boot $Y_FS_BOOT defaults 0 2
    yrun echo $Y_DEV$Y_SWAP none  sw 0 0
FOUT=""

yrun sudo cp $TMP $Y_ORIG_MNT/etc/fstab

yrun sudo chroot $Y_ORIG_MNT update-grub
yrun sudo chroot $Y_ORIG_MNT update-initramfs -u -k all
yrun sudo chroot $Y_ORIG_MNT update-grub
yrun sudo chroot $Y_ORIG_MNT grub-install $Y_DEV

echo All should be DONE, reboot: `date`
#sudo init 0
