#!/bin/bash
# vim: set ts=4:
# Based on template.src version 1.1 last modified 2006.08.07 by y
# sync a filesystem with another one

trap y_exit TERM HUP INT

# Uncomment this to allow colors on the console
USE_COLOR="yes"

# This will enable positioning of a text to the end (-8 char) 
# of a line independent of window size
USE_POS="yes"

# Source the function library
FUNCTIONS="/bin/y_functions.sh"
test -r ${FUNCTIONS} && source ${FUNCTIONS}

# define the following to match the program current state
PROGRAM_NAME="yrsync_dev"
VERSION="1.0"
LAST_MOD="2017.11.09"

# Define log file here
LOG="/var/log/${0##*/}.log"

# Uncomment this if you need debug enabled
Y_DEBUG="true"

# define backup system mount point
DEST_ROOT="/mnt"

# define filesystems to sync

# define rsync command
RSYNC_OPT="-arxl --delete"

# usefull defaults
DEST_MOUNT="/ /usr /opt /var"
SRC_ROOT="/"
SRC_DIRS="/"
EXCL_DIRS="/etc/fstab /root /home /boot /lost+found"
FSTAB="/etc/fstab"
DEV="yes"
MOUNT="yes"
LILO="yes"
DELETE_LIST="/usr /var"

FSTAB_DEST="/etc/fstab.main"
BOOT_DIR="/boot"
DEV_DIR="/dev"
KERNEL_MAIN="vmlinuz"
KERNEL_OLD="vmlinuz.old"
KERNEL_DEV="vmlinuz.dev"

# use these to set cleanup on exit
#MOUNTED=""		# y_exit will unmount them
#DELETE_ON_EXIT=""	# y_exit will delete them
#LAST_CMD=""		# y_exit will run it just before exit

y_start
# ===================================================================================
# there is a bug in y_functions around y_help, it can not display RSYNC_OPT well
y_info "Default rsync options: $RSYNC_OPT"
y_info "Make sure destination system is not hibernated before update!"

# read command line parameters
while [ -n "$1" ] ; do
    case $1 in
	--help|-h)	    y_help "[Oprions]";y_exit;; #; Help
	--droot|-r)	    DEST_ROOT="$2"; shift;;	    #; Define destination root [DEST_ROOT]
    --dmount|-m)    DEST_MOUNT="$2"; shift;;    #; Define dest. mounts [DEST_MOUNT]
    --sroot|-s)     SRC_ROOT="$2"; shift;;      #; Define source root [SRC_ROOT]
	--sdirs|-d)	    SRC_DIRS="$2"; shift ;;	    #; Define source dirs to copy [SRC_DIRS]
    --excl|-e)      EXCL_DIRS="$2"; shift;;     #; Exclude dirs from sync [EXCL_DIRS]
	--rsync|-r)	    RSYNC_OPT="$2"; shift ;;    #; Define rsync options [RSYNC_OPT]
    --delete|-D)    DELETE_LIST="$2"; shift;;   #; Delete [DELETE_LIST] before rsync run
	--nocolor|-C)   USE_COLOR="no";;			#; Color display [USE_COLOR]
	--nomount|-M)	MOUNT="no";;				#; Mount destination dirs [MOUNT]
	--dfstab|-f)    FSTAB_DEST="$2"; shift ;;  	#; Define dest_fstab [FSTAB_DEST]
    --nolilo|-l)    LILO="no";;                 #; Run lilo to update bootloader [LILO]
    --nodev|-D)	    DEV="no";;					#; Create core devices under /dev [DEV]
    --dry_run|-N)   Y_DRY_RUN="true";;          #; Enable dry run [Y_DRY_RUN]
    esac
    shift
done

test -r ${FUNCTIONS} && source ${FUNCTIONS}

RSYNC="rsync $RSYNC_OPT"

test -n "$FSTAB_DEST" && { 
	test -r "$FSTAB_DEST"  || y_fatal_error "Invalid fstab defined [$FSTAB_DEST]"
}

# mount destination directories
test "$MOUNT" = "yes" && {
    for i in $DEST_MOUNT ; do
        x=`grep -E $i'($|\s)' $FSTAB_DEST`
        M_DEV=`echo $x | awk '{print $1}'`
        M_PATH=${DEST_ROOT}`echo $x | awk '{print $2}'`
        y_run_cmd "mkdir -p $M_PATH"
        y_run_cmd "mount $M_DEV $M_PATH"
        test -z "$Y_DRY_RUN" && MOUNTED="$M_PATH $MOUNTED"
    done
}

# create exclude list
for i in $EXCL_DIRS ; do
    EXCLUDE="$EXCLUDE --exclude=$i"
done

for i in $DELETE_LIST ; do
    y_progress "Delete ${DEST_ROOT}${i}/ ..."
    y_run_cmd "rm -r -f --one-file-system ${DEST_ROOT}${i}/*"
    y_progress_end 0
done

# sync the filesystems
for i in $SRC_DIRS ; do
    s=`printf "%-12s" $i`
    y_progress "Sync $s -> ${DEST_ROOT}${i} ..."
    y_run_cmd "$RSYNC $EXCLUDE $i $DEST_ROOT"
    y_progress_end 0
done

# adjust backup system
y_progress "Adjust filesystem..."
test "$DEV" = "yes" && {
	test -e "${DEST_ROOT}${DEV_DIR}/console" || 
        y_run_cmd "mknod ${DEST_ROOT}${DEV_DIR}/console c 5 1"
	test -e "${DEST_ROOT}${DEV_DIR}/null" || 
        y_run_cmd "mknod ${DEST_ROOT}${DEV_DIR}/null c 1 3"
	test -e "${DEST_ROOT}${DEV_DIR}/tty1" || 
        y_run_cmd "mknod ${DEST_ROOT}${DEV_DIR}/tty1 c 4 1"
}

test "$LILO" = "yes" && {
    y_run_cmd "mount -T ${DEST_ROOT}${FSTAB_DEST} $BOOT_DIR"
    y_run_cmd "mount -o remount,rw $BOOT_DIR"
    y_run_cmd "mount --bind $BOOT_DIR ${DEST_ROOT}${BOOT_DIR}"
    test -z "$Y_DRY_RUN" && MOUNTED="${DEST_ROOT}${BOOT_DIR} $BOOT_DIR $MOUNTED"
    y_run_cmd "mount --bind $DEV_DIR ${DEST_ROOT}${DEV_DIR}"
    test -z "$Y_DRY_RUN" && MOUNTED="${DEST_ROOT}${DEV_DIR} $MOUNTED"
    y_run_cmd "cp ${DEST_ROOT}${BOOT_DIR}/$KERNEL_MAIN ${DEST_ROOT}${BOOT_DIR}/$KERNEL_OLD"
    y_run_cmd "cp ${DEST_ROOT}${BOOT_DIR}/$KERNEL_DEV ${DEST_ROOT}${BOOT_DIR}/$KERNEL_MAIN"
    y_run_cmd "lilo -r $DEST_ROOT"
    y_run_cmd "mount -o remount,ro $BOOT_DIR"
}

y_progress_end 0

# ===================================================================================
# Leave this as the last line
y_exit
