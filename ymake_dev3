#!/bin/bash
# vim:set ts=2 sw=2:
# Base template2.src version 1.0 last modified 2018.01.11 by y
# TODO: add kernel auto version compile and increment local version
# TODO: add partition by PARTLABEL

y_start(){ :; }
y_exit(){ :; }
y_help(){ :; }

trap y_exit TERM HUP INT

# Source the function library
ylib () {
  FSH="y_bash_lib"
  LIB=`which $FSH`
  test $? != '0' && { echo Fatal Error!; exit 1; }
  test -r ${LIB} && source ${LIB}
}
ylib

# Uncomment this to allow colors on the console
USE_COLOR=$YES

# This will enable positioning of a text to the end (-8 char) 
# of a line independent of window size
USE_POS=$YES

# Enable bell for warnings and errors
#USE_BELL=$YES

# define the following to match the program current state
PROGRAM_NAME="ymake_dev3"
PROG_DESC="Utility to manage a gentoo based host install and update."
VERSION="3.4"
LAST_MOD="2022.10.17"

# Define log file here
LOG="/tmp/${0##*/}.log"

# Uncomment this if you need debug enabled
#Y_DEBUG=$TRUE

# use these to set cleanup on exit
#MOUNTED=""             # y_exit will unmount them
#DELETE_ON_EXIT=""      # y_exit will delete them
#LAST_CMD=""            # y_exit will run it just before exit

# Uncomment to make script quiet
#Y_QUIET=$FALSE

# Uncomment to ask for confirmation 
#Y_CONFIRM=$TRUE

# destination options: LOG,STDOUT,STDERR
#Y_MSG_DEST="LOG"
Y_RUN_RET_SUM=0

# -------------- configuration defaults -----------------------
Y_MIN_TMP="10" # GBite
#Y_MOUNT_DEV="/run:=/run"
Y_MOUNT_PSEUDO="/dev /dev/pts /run /xdir/tmp /xdir/gentoo_dev:=/xdir/gentoo"
Y_DEV_MNT="/xdev"
Y_DISK="nvme0n1"
Y_PART="p5"
Y_SRC_DIRS="/usr /var /opt"
Y_SRC_FSTAB="/etc/fstab.dev"
Y_GRUB_CFG="/boot/grub/grub.cfg"
Y_DEL_RSYNC=" \
  /etc/runlevels/default/xdm \
  /etc/runlevels/boot/dmcrypt"
Y_DEV_NAME="/etc/conf.d/hostname.dev"
Y_GENTOO_BACKUP="/xdiri/gentoo_saved/"
Y_KERNEL_SOUCE_DIR="/usr/src/linux"
Y_KERNEL_CONFIG_FILE="$Y_KERNEL_SOURCE_DIR/.config"
Y_KERNEL_CONFIG_BKP_DIR="/usr/src"

ylib

#y_init_screen
y_start
CMD="$@"

# ===================================================================================
HELP="Defaults"
# read command line parameters
while [ -n "$1" ] ; do
  case $1 in
    --help|-h)	y_help $PROG_DESC; y_exit;;    #; Help [HELP]
    --quiet|-Q) Y_QUIET=$TRUE;;                 #; Enable quiet mode [Y_QUIET]
    --debug|-D) Y_DEBUG=$TRUE;;                 #; Enable debug mode [Y_DEBUG]
    --dry|-N)   Y_DRY_RUN=$TRUE;;               #; Execute dry run mode [Y_DRY_RUN]
    --nocolor)  unset USE_COLOR;;               #; Disable color output [USE_COLOR]
    --log|-L)   LOG="$2"; shift;;               #; Set log destination [LOG]
    --version|-V) y_version; y_exit;;           #; Display version and exit
    --new_dev)  Y_NEW_DEV=$TRUE;;               #; Initial new DEV device [Y_NEW_DEV]
    --disk)     Y_DISK="$2"; shift;;            #; Select disk [Y_DISK]
    --part|-p)  Y_PART="$2"; shift;;            #; Set partition [Y_PART]
    --mnt|-M)   Y_DEV_MNT="$2"; shift;;         #; Set DEV root [Y_DEV_MNT]
    --mountdev) Y_MOUNT_DEV="$2"; shift;;       #; Mount DEV FS [Y_MOUNT_DEV]
    --mountmisc) Y_MOUNT_MISC=$TRUE;;           #; Mount misc. devs [Y_MOUNT_MISC]
    --src_dirs) Y_SRC_DIRS="$2"; shift;;        #; Source dirs [Y_SRC_DIRS]
    --src_fstab) Y_SRC_FSTAB="$2";shift;;       #; host side fstab to use [Y_SRC_FSTAB]
    --noclean)  Y_NOCLEAN=$TRUE;;               #; Do not clean-up on exit [Y_NOCLEAN]
    --sync)     Y_SYNC=$TRUE;;                  #; Sync gentoo files [Y_SYNC]
    --prechg)   Y_PRECHG_DEV=$TRUE;;            #; Enable change before update [Y_PRECHG_DEV]
    --update|-P) Y_UPDATE=$TRUE;;               #; Update Gentoo [Y_UPDATE]
    --check)    Y_CHECK=$TRUE;;                 #; Pre-check build [Y_CHECK]
    --build)    Y_BUILD=$TRUE;;                 #; Build/update DEV system [Y_BUILD]
    --resume)   Y_BUILD_RESUME=$TRUE;;          #; Resume system build [Y_BUILD_RESUME]
    --ckernel)  Y_CONFIG_KERNEL=$TRUE;;         #; Config kernel [Y_CONFIG_KERNEL]
    --vkernel)  Y_KERNEL_VERSION=$2;shift;;     #; Kernel version inrement [Y_KERNEL_VERSION]
    --bkernel)  Y_BUILD_KERNEL=$TRUE;;          #; Build kernel [Y_BUILD_KERNEL]
    --lilo)     Y_LILO=$TRUE;;                  #; Update bootloader [Y_LILO]
    --grub_inst) Y_GRUB_INSTALL=$TRUE;;         #; Install grub [Y_GRUB_INSTALL]
    --grub)     Y_GRUB=$TRUE;;                  #; Update grub [Y_GRUB]
    --grub_cfg) Y_GRUB_CFG="$2";shift;;         #; Define grub.cfg file [Y_GRUB_CFG]
    --rebuild)  Y_REBUILD=$TRUE;;               #; Rebuild system after new kernel
    --clgentoo) Y_CGENTOO=$TRUE;;               #; Clean Gentoo [Y_CGENTOO]
    --qtest)    Y_QUICKTEST=$TRUE;;             #; Test new sys by chroot [Y_QUICKTEST]
    --systest)  Y_SYSTEST=$TRUE;;               #; Test by reboot into DEV [Y_SYSTEST]
    --tools|-U) Y_UPDATE_TOOLS=$TRUE;;          #; Update system tools [Y_UPDATE_TOOLS]
    --gentoo_save) Y_GENTOO_SAVE=$TRUE;;        #; Save gentoo files [Y_GENTOO_SAVE]
  esac
  shift
done

# log command line parameters
y_debug $0 $CMD

# set some sane defaults if not set already
y_set_default Y_MSG_DEST "LOG,STDOUT,STDERR"
y_set_default Y_DEBUG_ON_ERROR $TRUE
y_set_default Y_EXIT_ON_ERROR $FALSE

# resource the library to make effect changes in the environment variables
ylib

# check if required tools are installed
y_check_cmds "lsblk chroot grep emerge parted mkfs.vfat mkfs.ext2 mkfs.ext4 mkswap"

# test partition device name format
y_check_dryrun_not &&
  test ! -b /dev/disk/by-partlabel/xdev &&
    y_fatal_error "PARTLABEL=xdev not available!"


# initialize a new device to be used
#  tune partitions and filesystem config below
test -n "$Y_NEW_DEV" && {
  y_msg_dest LOG
  DEV="/dev/$Y_DISK"
  test -b "$DEV" || y_fatal_error "Invalid [$DEV] block device"
  y_progress_nl "Initialize device [$DEV]"
  y_run parted --script $DEV \
    mklabel gpt \
    mkpart primary 2MiB 4MiB \
    mkpart primary ext2 4MiB 1024MiB \
    mkpart primary linux-swap 1GiB 10GiB \
    mkpart primary ext4 10GiB 100GiB \
    mkpart primary ext4 100GiB 100% \
    name 1 efi \
    name 2 boot \
    name 3 swap \
    name 4 rootfs \
    name 5 xdir \
    set 1 esp on 
  y_run partprobe ${DEV}${Y_PART}1
  y_run mkfs.vfat ${DEV}${Y_PART}1
  y_run mkfs.ext2 ${DEV}${Y_PART}2
  y_run mkswap ${DEV}${Y_PART}3
  y_run mkfs.ext4 ${DEV}${Y_PART}4
  y_run mkfs.ext4 ${DEV}${Y_PART}5
  y_msg_dest_restore
  y_progress_end
}

# make sure we run as root
y_check_dryrun_not && test $(id -u) -ne 0 && 
  y_fatal_error "Script should run as root!"

# mount DEV ROOTFS if it is not mounted yet
! y_check_mount "/dev/${Y_DISK}${Y_PART}" "$Y_DEV_MNT" && {
  y_progress_nl "Mount DEV root on $Y_DEV_MNT..."
  y_run "fsck -p /dev/${Y_DISK}${Y_PART} 2>&1 >> $LOG"
  y_run mkdir -p $Y_DEV_MNT
  y_mount /dev/${Y_DISK}${Y_PART} $Y_DEV_MNT
  y_progress_end
}

# mount extra block device(s) required to make up DEVFS
# format example
#     /1=/test1,/2:=/test2,/3
#     ':=' marks bind mount
test "$Y_MOUNT_DEV" != $FALSE && {
  y_progress_nl "Mount required block devices..."
  OLDIFS=$IFS
  IFS=","
  Y_MOUNT_LIST=`echo $Y_MOUNT_DEV`
  IFS=$OLDIFS
  for i in $Y_MOUNT_LIST ; do
    y_run mkdir -p ${Y_DEV_MNT}${i#*=}
    if [ ${i%:=*}':='${i#*:=} = $i ] ; then
      y_mount --bind ${i%:=*} ${Y_DEV_MNT}${i#*=}
    else
      y_mount ${i%=*} ${Y_DEV_MNT}${i#*=}
    fi
  done
  y_progress_end
}

# backup current gentoo files
test "$Y_GENTOO_SAVE" == $TRUE && {
  y_progress_nl "Backup gentoo to [$Y_GENTOO_BACKUP].."
  y_run mkdir -p $Y_GENTOO_BACKUP
  y_run rsync -arx /gentoo/ $Y_GENTOO_BACKUP
  y_progress_end
}

# sync DEV install from current install 
test -n "$Y_SYNC" && {
  y_progress_nl "Sync DEV system with current install..."
  y_msg_dest LOG
  y_run yrsync_xos -x $Y_DEV_MNT -f $Y_SRC_FSTAB -d \"$Y_SRC_DIRS\" -m -r \"-arxK --delete\"
  y_run cp $Y_DEV_NAME $Y_DEV_MNT/etc/conf.d/hostname
  for i in $Y_DEL_RSYNC ; do
    y_run rm -f $Y_DEV_MNT$i
  done
  y_msg_dest_restore
  y_progress_end
}  

# mount pseudo fs and support dirs on DEV
test "$Y_MOUNT_MISC" = $TRUE && {
  y_progress_nl "Mount DEV misc. devices..."
  y_run mkdir -p $Y_DEV_MNT/dev
  y_mount --bind /dev $Y_DEV_MNT/dev
  y_run mkdir -p $Y_DEV_MNT/run
  y_mount --bind /run $Y_DEV_MNT/run
  y_run mkdir -p $Y_DEV_MNT/dev/pts
  y_mount --bind /dev/pts $Y_DEV_MNT/dev/pts
  y_run mkdir -p $Y_DEV_MNT/xdir/tmp
  y_mount --bind /xdir/tmp $Y_DEV_MNT/xdir/tmp
  y_run mkdir -p $Y_DEV_MNT/xdir/gentoo
  y_mount --bind /xdir/gentoo_dev $Y_DEV_MNT/xdir/gentoo
  y_run mkdir -p $Y_DEV_MNT/proc
  y_mount -t proc proc $Y_DEV_MNT/proc
  if y_check_dryrun_not ; then
    test -x $Y_DEV_MNT/bin/bash || 
      y_error "Can not execute $Y_DEV_MNT/bin/bash on [$Y_DEV_MNT]"
    y_msg_dest "LOG,STDOUT"
    PORTAGE_TMPDIR=`y_run chroot $Y_DEV_MNT /bin/bash -c \
      '"emerge --info 2>/dev/null | grep PORTAGE_TMPDIR"'`
    y_msg_dest_restore
    P_TMP=${PORTAGE_TMPDIR##*PORTAGE_TMPDIR=\"}
    P_TMP=${P_TMP%*\"}
    test "PORTAGE_TMPDIR=\"$P_TMP\"" != "$PORTAGE_TMPDIR" && 
      y_error "Portage TMP dir [$P_TMP] not what expected!"
    y_run mkdir -p ${Y_DEV_MNT}${P_TMP}

    # check if TMP is large enough for a build
    AV=`df -B 1G ${Y_DEV_MNT}${P_TMP} | awk '/[0-9]%/{print $(NF-2)}'`
    #y_debug [$AV][$Y_DEV_MNT][$P_TMP]
    if [[ "$AV" -le "$Y_MIN_TMP" ]] ; then
      y_warning "TMP free space may be too low [${AV}GB]"
    fi
    # y_mount --bind /tmp $Y_DEV_MNT$P_TMP
    y_run chmod 1777 $Y_DEV_MNT$P_TMP
    y_run cp /tmp/yps* $Y_DEV_MNT/tmp/
  else
    y_dryrun Mount tmp_fs for gentoo
    y_dryrun Copy PS1 files
  fi
  y_progress_end
}

# Make changes to DEV before starting update
test "$Y_PRECHG_DEV" = $TRUE && {
  y_progress_nl "Change DEV before update...."
  y_msg_dest "STDOUT,STDERR,LOG"
  y_run chroot $Y_DEV_MNT bash --rcfile $Y_CHROOT_FILE -i
  y_msg_dest_restore
  y_progress_end
}

# clean up gentoo files: packages and distfiles
test -n "$Y_CGENTOO" && {
    y_progress_nl "Clear Gentoo build files...."
    y_msg_dest LOG
    y_run eclean-pkg
    y_msg_dest_restore
    y_progress_end
}

# update build system on DEV: emerge --sync
test -n "$Y_UPDATE" && {
  y_progress_nl "Gentoo sync and portage update..."
  y_msg_dest LOG
  #y_run chroot $Y_DEV_MNT emerge --sync
  y_run chroot $Y_DEV_MNT emaint -a sync
  y_run chroot $Y_DEV_MNT emerge -1q portage
  y_msg_dest_restore
  y_progress_end
}

# check if it would build
test -n "$Y_CHECK" && {
    y_progress_nl "Pre-Check build..."
    y_msg_dest LOG
    y_run chroot $Y_DEV_MNT emerge -pvuDN world
    y_msg_dest_restore
    y_progress_end
}

# build system on DEV
test -n "$Y_BUILD" && {
    y_msg_dest LOG
    y_progress_nl "Build/update DEV system..."
    y_run chroot $Y_DEV_MNT emerge -quDN world
    y_msg_dest_restore
    y_msg_dest "STDOUT,LOG"
    y_run chroot $Y_DEV_MNT etc-update
    y_msg_dest_restore
    y_progress_end
}

# resume build system on DEV
test -n "$Y_BUILD_RESUME" && {
    y_msg_dest LOG
    y_progress_nl "Resume build/update DEV system..."
    y_run chroot $Y_DEV_MNT emerge --resume
    y_msg_dest_restore
    y_msg_dest "STDOUT,LOG"
    y_run chroot $Y_DEV_MNT etc-update
    y_msg_dest_restore
    y_progress_end
}

# configure kernel
# make olddefconfig - for new symbols use it defaults without asking
if [ "$Y_CONFIG_KERNEL" == $TRUE  -o  "$Y_KERNEL_VERSION" == "+"  ] ; then
  y_progress_nl "Change the kernel configuration"
  y_check_dryrun_not && {
    VERSION="CONFIG_LOCALVERSION"
    #VERSION=${VERSION}_
    CFILE="$Y_KERNEL_CONFIG_FILE"
    CMD="grep ${VERSION}= $CFILE"
    y_progress_nl "Configure the kernel now..."
    test "$Y_QUIET" != "$TRUE" && y_run bash --rcfile $Y_CONSOLE_FILE -i
    #cd $Y_DEV_MNT/usr/src/linux
    y_msg_dest "STDOUT,STDERR"
    test "$Y_KERNEL_VERSION" = "+" && {
      test -f $Y_DEV_MNT/$CFILE ||
        y_run cp $Y_DEV_MNT/$Y_KERNEL_CONFIG_BKP_DIR/$(basename $CFILE) $CFILE
      X=$(chroot $Y_DEV_MNT $CMD)
      X=${X##*${VERSION}=}
      X=${X:1:-1}
      if [[ -z "${X##*=}" ]] ; then
        V=-ya-`date +%s`
      else
        Y=${X##*-y-?.}
        V=${X%%.*}.$((Y +1))
      fi
      y_info "new local version $V [$X]"
      SAVE="y"
      test "$Y_QUIET" != "$TRUE" && {
        y_info "Set new version [y]?"
        read -rsn1 SAVE
      }
      test ${SAVE} = "y" && {
        y_run chroot $Y_DEV_MNT "sed -i 's/$VERSION=.*/$VERSION=\"$V\"/g' $CFILE"
        y_run chroot $Y_DEV_MNT "cp -u --backup $CFILE $Y_KERNEL_CONFIG_BKP_DIR"
      }
    }
    y_msg_dest_restore
    y_progress_end
  }
fi

# build new kernel
test -n "$Y_BUILD_KERNEL" && {
    VMLINUZ_DEV="/boot/vmlinuz-dev"
    Y_CONFIRM="$TRUE"
    test -h "$VMLINUZ_DEV" -a "$Y_QUIET" != $TRUE && {
      y_warning "$VMLINUZ_DEV is a sym link! Is it OK [$YES]"
      y_get_confirm
    }
    y_progress_nl "make olddefconfig"
    test -f $Y_DEV_MNT/$Y_KERNEL_CONFIG_FILE ||
      y_run chroot $Y_DEV_MNT "cd $Y_KERNEL_SOURCE_DIR; cp ../$(basename $Y_KERNEL_CONFIG_FILE) .; make olddefconfig"
    y_progress_nl "Building kernel..."
    y_msg_dest "STDERR,LOG"
    y_run chroot $Y_DEV_MNT /bin/bash -c \
      '"cd $Y_KERNEL_SOURCE_DIR; make bzImage modules modules_install install"'
    y_run cp $Y_DEV_MNT/usr/src/linux/arch/x86/boot/bzImage $VMLINUZ_DEV
    y_run cp $Y_DEV_MNT/usr/src/linux/.config /boot/config-dev
    y_msg_dest_restore
    y_progress_end
}

# update lilo bootloader
test -n "$Y_LILO" && {
    y_progress_nl "Update bootloader..."
    y_run mount -o remount,rw /boot
    y_run lilo
    y_run mount -o remount,ro /boot
    y_progress_end
}    

# grub install
test -n "$Y_GRUB_INSTALL" && {
  y_progress_nl "Grub EFI install..."
  shopt -s extglob
  DEV="$Y_DISK"
  shopt -u extglob
  test -b /dev/$DEV || y_fatal_error "Invalid block device [$DEV]"
  y_msg_dest LOG
  y_run mount -o remount,rw /sys/firmware/efi/efivars
  y_run grub-install --root-directory=$Y_DEV_MNT --removable \
    --target=x86_64-efi --efi-directory=$Y_DEV_MNT/boot/efi /dev/$DEV
  y_run mount -o remount,ro /sys/firmware/efi/efivars
  y_msg_dest_restore
  y_progress_end
}

# update grub bootloader
test -n "$Y_GRUB" && {
  y_progress_nl "Update grub bootloader..."
  y_run cp $Y_GRUB_CFG $Y_DEV_MNT/boot/grub/grub.cfg
  y_progress_end
}

# rebuild/clean-up system after new kernel
test -n "$Y_REBUILD" && {
  y_progress_nl "Checking and system clean-up..."
  y_msg_dest LOG
  y_progress_nl "  Clean distfiles..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"eclean distfiles"'
  y_progress_nl "  Cheching build integrity..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -quDN world"'
  y_progress_nl "  Removing unused packages 'depclean'..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge --depclean -q"'
  y_progress_nl "  Cheching build after depclean..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -quDN world"'
  y_progress_nl "  Rebuilding preserved packages..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @preserved-rebuild -q"'
  y_progress_nl "  Rebuilding X11 modules..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @x11-module-rebuild -q"'
  y_progress_nl "  Rebuilding misc. modules..."
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge @module-rebuild -q"'
  y_run chroot $Y_DEV_MNT /bin/bash -c '"emerge -q1 udev"'
  y_msg_dest_restore
  y_progress_nl "Check and clean-up result"
  y_progress_end
}

# quick test new install by chroot and command line
test -n "$Y_QUICKTEST" && {
  y_progress_nl "Quick test new system..."
  y_msg_dest "STDOUT,STDERR"
  y_run chroot $Y_DEV_MNT bash --rcfile $Y_CHROOT_FILE -i
  y_msg_dest_restore
  y_progress_end
}

test -f "$Y_TODO" && y_run_ cp "$Y_TODO" "$Y_DEV_MNT"/__TODO__

# Test new install by hibernating current version and boot into DEV
test -n "$Y_SYSTEST" -o -n "$Y_SYSMERGE" && {
    y_progress_nl "System test/merge..."
    y_progress_nl "  Hibernate current host and boot into DEV..."
    y_run y_umount
    y_run mount -o remount,rw /boot
    y_run lilo -R DEV noresume
    y_run mount -o remount,ro /boot
    y_run y_hibernate reboot
    y_run pm-hibernate
    y_run mount -o remount,rw /boot
    y_run lilo -R
    y_run mount -o remount,ro /boot
    y_run y_hibernate shutdown
    y_progress "All done"
    y_progress_end
}

test -n "$Y_UPDATE_TOOLS" && {
  y_progress_nl "Update tools and BUILD file..."
  y_msg_dest "STDERR,LOG"
  y_run yupdate_bin --quiet
  y_run chmod u+s /sbin/unix_chkpwd
  y_run "date +_%Y_%m_%d > $Y_DEV_MNT/BUILD"
  y_msg_dest_restore
  y_progress_end
}

# only for testing new debug console features
#y_debug_console

# ===================================================================================
# Leave this as the last line
y_exit
