#!/bin/bash
# vim: ts=4 sw=4:
# Based on template.src version 1.2 last modified 2006.09.29 by y
# Build a new Gentoo based system and install it

y_start(){ :; }
y_exit(){ :; }
y_help(){ :; }

trap y_exit TERM HUP INT EXIT

# Uncomment this to allow colors on the console
USE_COLOR="yes"

# This will enable positioning of a text to the end (-8 char) 
# of a line independent of window size
USE_POS="yes"

# Enable bell for warnings and errors
USE_BELL="yes"

# Source the function library
FUNCTIONS="/bin/y_functions.sh"
test -r ${FUNCTIONS} && source ${FUNCTIONS}

# define the following to match the program current state
PROGRAM_NAME="Make new desktop for testing"
VERSION="1.0-rc1"
LAST_MOD="2017.07.07"

# Define log file here
#LOG="/tmp/${0##*/}.log"
LOG="/var/log/ymake_dev.log"

# Uncomment this if you need debug enabled
Y_DEBUG="true"

# use these to set cleanup on exit
#MOUNTED=""        # y_exit will unmount them
#DELETE_ON_EXIT=""    # y_exit will delete them
#LAST_CMD=""        # y_exit will run it just before exit

# -------------- configuration defaults -----------------------
Y_DEV_DEV="/dev/sdb3"
Y_DEV_MNT="/xy"
Y_TODO="/proj/jenov/scripts/ymake_dev_TODO"
Y_EPS1="\[\033[01;31m\]FIXME#\[\033[00m\] "
Y_EPS2="\[\033[00;34m\]DEV#\[\033[00m\] "
Y_ERROR_CONSOLE="true"

Y_CONFIRM=""

# helping functions

y_debug_console_help (){
    echo "----------------------------------------"
    echo "Debug console options:"
    echo "  exit  : skip"
    echo "  exit 1: retry"
    echo "  exit 2: exit"
    echo "-----------------------------------------"
}

# run function that checks sucessful command exit status and breaks if not
y_run_ (){
    test -n "$Y_DRY_RUN" && { y_run $@; return;} 
    CLOOP=""
    RET=""
    while [ "$RET" != "0" ]; do
        y_run1 $*
        RET="$?"
        test "$RET" != "0" && {
            #y_info "'$*' command returned: $RET"
            if [ "$Y_ERROR_CONSOLE" = "true" ] ; then
                test -z "$CLOOP" && { y_debug_console_help; CLOOP="x"; }
                chroot $Y_DEV_MNT bash --rcfile /tmp/PS1 -i
                RET="$?"
                case "$RET" in
                    0) echo SKIP: "$*"; return;;
                    1) echo RETRY: "$*"; continue;;
                    2) exit "$RET";;
                esac
            else
                exit "$RET"
            fi
        }
    done
}

# mount device and store it for cleanup
y_mount(){
    y_run_ mount "$*"
    test -z "$Y_DRY_RUN" && {
        MOUNTED_CC="${@: -1} $MOUNTED_CC"
        test -n "$Y_NOCLEAN" || MOUNTED=$MOUNTED_CC
    }
} 

# unmount dirs and remove them from mounted list
y_umount(){
    if [ -n "$MOUNTED" ] ; then
        for i in $MOUNTED ; do
            `umount -l $i > /dev/null`
            test "$?" = "1" && y_error 2 "umount $i"
        done
    fi
    MOUNTED=""
}

# chroot with cd feature
# y_chroot new_dir root_dir command
#   new_dir is relative to root_dir
y_chroot(){
    test -n "$Y_DRY_RUN" && { y_run y_chroot $@; return;} 
    if [ $# -le 2 ]; then exit 1; fi
    _ROOT="$2"
    test -z "$Y_DRY_RUN" && {
        _TMP=`mktemp`
        echo -e "cd $1;" > $_TMP
        shift 
        shift
        echo "$@" >> $_TMP
    }
    y_run_ mv $_TMP $_ROOT/$_TMP
    y_run_ chmod +x $_ROOT/$_TMP
    y_run_ chroot $_ROOT $_TMP
    y_run_ rm $_ROOT/$_TMP
}

# set pm_hibernate mode
# valid options are in /sys/power/disk
y_hibernate(){
    cat /sys/power/disk | grep $1 >/dev/null
    if [ $? = "0" ] ; then
        sed -i s/HIBERNATE_MODE=\".*\"/HIBERNATE_MODE=\"$1\"/ /etc/pm/config.d/config
    else
        y_fatal_error "Invalid hibarnate mode [$1]"
    fi
}

y_start
# ==============================================================================
# read command line parameters
while [ -n "$1" ] ; do
    case $1 in
        --help|-h)  y_help "[Options]"; exit;;      #; Help
        --dev|-d)   Y_DEV_DEV="$2"; shift;;         #; Set device [Y_DEV_DEV]
        --mnt|-M)   Y_DEV_MNT="$2"; shift;;         #; Set DEV root [Y_DEV_MNT]
        --mountdev) Y_MOUNT_DEV="true";;            #; Mount DEV FS [Y_MOUNT_DEV]
        --noclean)  Y_NOCLEAN="true";;              #; Do not clean on exit [Y_NOCLEAN]
        --sync)     Y_SYNC="true";;                 #; Sync gentoo files [Y_SYNC]
        --update)   Y_UPDATE="true";;               #; Update Gentoo [Y_UPDATE]
        --check)    Y_CHECK="true";;                #; Pre-check build [Y_CHECK]
        --build)    Y_BUILD="true";;                #; Build/update DEV system [Y_BUILD]
        --sysmerge) Y_SYSMERGE="true";;             #; Merge DEV to HOST [Y_SYSMERGE]
        --lkernel)  Y_LINK_KERNEL="true";;          #; Link kernel [Y_LINK_KERNEL]
        --ckernel)  Y_CONFIG_KERNEL="true";;        #; Config kernel [Y_CONFIG_KERNEL]
        --bkernel)  Y_BUILD_KERNEL="true";;         #; Build kernel [Y_BUILD_KERNEL]
        --lilo)     Y_LILO="true";;                 #; Update bootloader [Y_LILO]
        --rebuild)  Y_REBUILD="true";;              #; Rebuild system after new kernel
        --cgentoo)  Y_CGENTOO="true";;              #; Clean Gentoo [Y_CGENTOO]
        --qtest)    Y_QUICKTEST="true";;            #; Test new sys by chroot [Y_QUICKTEST]
        --systest)  Y_SYSTEST="true";;              #; Test by reboot into DEV [Y_SYSTEST]
        --dry|-N)   export Y_DRY_RUN="true";;       #; Enable dry run [Y_DRY_RUN]
        --deb|-D)   export Y_DEBUG="true";;         #; Enable debug mode [Y_DEBUG]
        --quiet|-q) export Y_QUIET="true";;         #; Minimal messages [Y_QUIET]
        --log|-L)   export LOG="$2"; shift;;        #; Set LOG [LOG]
        --version|-V) y_version; y_exit;;           #; Display version and exit
    esac
    shift
done

test -r ${FUNCTIONS} && source ${FUNCTIONS}
#y_start
y_init_screen

# mount DEV root
test -n "$Y_MOUNT_DEV" && {
    y_progress "Mount DEV root on $Y_DEV_MNT..."
    test -z "$Y_DRY_RUN" && fsck -p "$Y_DEV_DEV" 2>&1 > $LOG
    y_mount "$Y_DEV_MNT"
    y_progress_end 0
}

# set prompts to show correct mode for interaction
# update useful config files on DEV system
test -z "$Y_DRY_RUN" && {
    echo PS1=\"$Y_EPS1\" > "$Y_DEV_MNT"/tmp/PS1
    echo PS1=\"$Y_EPS2\" > "$Y_DEV_MNT"/tmp/PS2
    echo "test -s ~/.alias && . ~/.alias" >> "$Y_DEV_MNT"/tmp/PS2
}

# mount system on DEV
test -n "$Y_MOUNT_DEV" && {
    y_progress "Mount DEV system devices..."
    y_mount --bind /dev $Y_DEV_MNT/dev
    y_mount --bind /dev/pts $Y_DEV_MNT/dev/pts
    y_mount -t proc proc "$Y_DEV_MNT"/proc
    y_mount --bind /gentoo "$Y_DEV_MNT"/gentoo
    y_run_ PORTAGE_TMP=`emerge --info | grep PORTAGE_TMPDIR`
    y_run_ mkdir -p $Y_DEV_MNT${PORTAGE_TMP##*PORTAGE_TMPDIR=}
    y_progress_end 0
}

# sync dev to current
test -n "$Y_SYNC" && {
    y_progress "Sync DEV system with current install..."
    y_run_ yrsync_xos -x "$Y_DEV_MNT" -f /etc/fstab.2
    y_progress_end 0
}  

# clean up gentoo files: packages and distfiles
test -n "$Y_CGENTOO" && {
    y_progress "Clear Gentoo build files...."
    y_run_ eclean-dist
    y_run_ eclean-pkg
    y_progress_end 0
}

# update build system on DEV: emerge --sync
test -n "$Y_UPDATE" && {
    y_progress "Update gentoo build cache..."
    #y_run_ chroot $Y_DEV_MNT emerge --sync
    y_run_ chroot $Y_DEV_MNT emaint -a sync
    y_run_ chroot $Y_DEV_MNT emerge -1q portage
    y_progress_end 0
}

# check if it would build: emerge -pvuDN world
test -n "$Y_CHECK" && {
    y_progress "Pre-Check build..."
    y_run_ chroot $Y_DEV_MNT emerge -pvuDN --verbose-conflicts world
    y_progress_end 0
}

# build system on DEV: emerge -qubDN world
test -n "$Y_BUILD" && {
    y_progress "Build/update DEV system..."
    y_run_ chroot $Y_DEV_MNT emerge -quDN world
    y_run_ chroot $Y_DEV_MNT etc-update
    y_progress_end 0
}

# update kernel link
test -n "$Y_LINK_KERNEL" && {
    y_progress "Update kernel link..."
    test -z "Y_DRY_RUN" &&
        y_info "Change kernel symlink to select active kernel"
    test -z "$Y_DRY_RUN" && { cd $Y_DEV_MNT/usr/src; bash --rcfile /tmp/PS2 -i; }
    y_progress_end 0
}    

# build new kernel
test -n "$Y_BUILD_KERNEL" && {
    y_progress "Build kernel..."
    test -n "$Y_CONFIG_KERNEL" -a -z "$Y_DRY_RUN" && {
        y_info "Change the kernel configuration"
        cd $Y_DEV_MNT/usr/src/linux; bash --rcfile $Y_DEV_MNT/tmp/PS2 -i; 
    }
    y_chroot /usr/src/linux $Y_DEV_MNT make bzImage modules modules_install
    y_progress_end 0
}

# update bootloader to boot new DEV
test -n "$Y_LILO" && {
    y_progress "Update bootloader..."
    y_run_ mount -o remount,rw /boot
    y_run_ cp /boot/vmlinuz.dev /boot/vmlinuz.dev_old
    y_run_ cp $Y_DEV_MNT/usr/src/linux/arch/x86/boot/bzImage /boot/vmlinuz.dev
    y_run_ lilo
    y_run_ mount -o remount,ro /boot
    y_progress_end 0
}    

# rebuild/clean-up system after new kernel
test -n "$Y_REBUILD" && {
    y_progress "Check, clean-up system..."
    y_progress "  Remove unused packages '--depclean'..."
    y_run_ chroot $Y_DEV_MNT emerge --depclean
    y_progress "  Chech build integrity..."
    y_run_ chroot $Y_DEV_MNT emerge -quDN world
    y_progress "  Rebuild preserved packages..."
    y_run_ chroot $Y_DEV_MNT emerge @preserved-rebuild
    y_progress "  Rebuild X11 modules..."
    y_run_ chroot $Y_DEV_MNT emerge @x11-module-rebuild
    y_progress "  Rebuild other modules..."
    y_run_ chroot $Y_DEV_MNT emerge @module-rebuild
    y_run_ chroot $Y_DEV_MNT emerge -q1 udev
    y_progress "Check, clean-up system"
    y_progress_end 0
}

# quick test new install by chroot and command line
test -n "$Y_QUICKTEST" && {
    y_progress "Quick test new system..."
    y_run_ cp /proj/jenov/scripts/yrsync_dev $Y_DEV_MNT/sbin
    test -z "$Y_DRY_RUN" && chroot $Y_DEV_MNT bash --rcfile /tmp/PS2 -i
    y_progress_end 0
}

test -f "$Y_TODO" && y_run_ cp "$Y_TODO" "$Y_DEV_MNT"/__TODO__

# Test new install by hibernating current version and boot into DEV
test -n "$Y_SYSTEST" && {
    y_progress "Hibernate current host and boot into DEV..."
    y_run_ cp /proj/jenov/scripts/yrsync_dev $Y_DEV_MNT/sbin
    y_run_ y_umount
    y_run_ mount -o remount,rw /boot
    y_run_ lilo -R DEV noresume
    y_run_ mount -o remount,ro /boot
    y_run_ y_hibernate reboot
    y_run_ pm-hibernate
    y_run_ mount -o remount,rw /boot
    y_run_ lilo -R
    y_run_ mount -o remount,ro /boot
    y_run_ y_hibernate shutdown
    y_progress_end 0
}

# merge new build to main based on DEV bin packages
test -n "$Y_SYSMERGE" && {
    y_progress "Update yrsync_dev utility..."
    y_run_ cp /proj/jenov/scripts/yrsync_dev $Y_DEV_MNT/sbin
    y_progress_end 0
    test -z "$Y_SYSTEST" && {
        y_info "Use --systest and run yrsync_dev for host update!"
    }
}

# ==============================================================================
# Leave this as the last line
#y_exit
